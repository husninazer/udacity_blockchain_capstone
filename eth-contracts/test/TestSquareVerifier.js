// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let Verifier = artifacts.require('Verifier');

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
const proof = require('./proof.json');

contract('Verifier', accounts => {

    const account_one = accounts[0];
    const account_two = accounts[1];

    describe('Proofs', function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({from: account_one});
        })

        it('Correct Proof', async function () {
          let status = false;
          try{
            status = await this.contract.verifyTx.call(
                                              proof.proof.A,
                                              proof.proof.A_p,
                                              proof.proof.B,
                                              proof.proof.B_p,
                                              proof.proof.C,
                                              proof.proof.C_p,
                                              proof.proof.H,
                                              proof.proof.K,
                                              proof.input,
                                              {from: accounts[0]});
          }
          catch(e) {
            console.log(e)
          }

          assert.equal(status, true, "False with correct inputs");
        })

        // Test verification with incorrect proof
        it('Incorrect Proof', async function () {
          let status = true;
          try{
            status = await this.contract.verifyTx.call(
                                              proof.proof.A,
                                              proof.proof.A_p,
                                              proof.proof.B,
                                              proof.proof.B_p,
                                              proof.proof.C,
                                              proof.proof.C_p,
                                              proof.proof.H,
                                              proof.proof.K,
                                              [5, 6],
                                              {from: accounts[0]});
          }
          catch(e) {
            console.log(e)
          }

          assert.equal(status, false, "True with Incorrect inputs");
        })

    });
})
